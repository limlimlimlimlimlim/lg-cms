// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @default(autoincrement()) @id
  userId           String   @unique
  password         String
  name             String
  phone            String?
  description      String?
  permissionId     Int
  facilityCategoryId Int?
  facilitySubCategoryId Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Permission {
  id             Int      @default(autoincrement()) @id
  name           String
  readAccount    Boolean @default(false)
  writeAccount   Boolean @default(false)
  editAccount    Boolean @default(false)
  deleteAccount  Boolean @default(false)
  readPermission Boolean @default(false)
  writePermission Boolean @default(false)
  editPermission  Boolean @default(false)
  deletePermission Boolean @default(false)
  readSchedule   Boolean @default(false)
  writeSchedule  Boolean @default(false)
  editSchedule   Boolean @default(false)
  deleteSchedule Boolean @default(false)
  readPost       Boolean @default(false)
  writePost      Boolean @default(false)
  editPost       Boolean @default(false)
  deletePost     Boolean @default(false)
  readMap         Boolean @default(false)
  writeMap        Boolean @default(false)
  editMap         Boolean @default(false)
  deleteMap       Boolean @default(false)
  readMapInfo    Boolean @default(false)
  writeMapInfo   Boolean @default(false)
  editMapInfo    Boolean @default(false)
  deleteMapInfo  Boolean @default(false)
  readFacility   Boolean @default(false)
  writeFacility  Boolean @default(false)
  editFacility   Boolean @default(false)
  deleteFacility  Boolean @default(false)
  readKiosk      Boolean @default(false)
  writeKiosk     Boolean @default(false)
  editKiosk      Boolean @default(false)
  deleteKiosk    Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Floor {
  id        Int      @default(autoincrement()) @id
  name      String
  nameEn    String?
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wings     Wing[]
  kiosks    Kiosk[]
}

model Wing{
  id          Int      @default(autoincrement()) @id
  name        String
  nameEn      String?
  floor       Floor @relation(fields: [floorId], references: [id] )
  floorId     Int
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  map         Map[]
  kiosks      Kiosk[]
}
model FacilityCategory {
  id            Int      @default(autoincrement()) @id
  name          String
  facilties     Facility[]
  subCategories FacilitySubCategory[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FacilitySubCategory {
  id          Int      @default(autoincrement()) @id
  name        String
  categoryId  Int
  facilties   Facility[]
  category    FacilityCategory  @relation(fields: [categoryId], references: [id])  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Facility {
  id          Int      @default(autoincrement()) @id
  name        String
  wingId      Int
  initial     String
  fnbId       Int
  phone       String
  address     String
  operation   String
  image       String
  iconId      Int
  x           Int?
  y           Int?
  section     Section? @relation(fields: [sectionId], references: [id])
  sectionId   Int @unique
  categoryId  Int
  category      FacilityCategory @relation(fields: [categoryId], references: [id])
  subCategoryId Int
  subCategory   FacilitySubCategory @relation(fields: [subCategoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Map {
  id            Int      @default(autoincrement()) @id
  floorId       Int
  wingId        Int
  wing          Wing  @relation(fields: [wingId], references: [id] )
  name          String
  image         String
  isUse         Boolean 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sections      Section[]
  sectionGroups SectionGroup[]
}

model Section {
  id          Int      @default(autoincrement()) @id
  mapId       Int       
  map         Map     @relation(fields: [mapId], references: [id])
  groupId     Int?
  group       SectionGroup? @relation(fields: [groupId], references: [id])
  facilityId  Int
  facility    Facility?
  path        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SectionGroup {
  id        Int      @default(autoincrement()) @id
  sections  Section[]
  mapId     Int
  map       Map @relation(fields: [mapId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id            Int      @default(autoincrement()) @id
  title         String
  image         String?
  description   String
  startDate     DateTime?
  endDate       DateTime?
  noPeriod      Boolean?
  useIntro      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Kiosk {
  id              Int      @default(autoincrement()) @id
  floorId         Int
  floor           Floor @relation(fields: [floorId], references: [id])
  wingId          Int
  wing            Wing @relation(fields: [wingId], references: [id])
  code            String @unique
  name            String
  description     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}